"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[478,6968],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(r),d=i,k=u["".concat(s,".").concat(d)]||u[d]||c[d]||l;return r?n.createElement(k,a(a({ref:t},m),{},{components:r})):n.createElement(k,a({ref:t},m))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=r.length,a=new Array(l);a[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var p=2;p<l;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5914:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var n=r(7462),i=(r(7294),r(3905)),l=r(7078);const a={},o="File Reporter",s={unversionedId:"metrics/file",id:"metrics/file",title:"File Reporter",description:"The Ziti Controller event system can write metrics to a file for direct viewing or post-processing into a metrics system of your choice.",source:"@site/docs/metrics/file.mdx",sourceDirName:"metrics",slug:"/metrics/file",permalink:"/docusaurus/docs/metrics/file",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/metrics/file.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Troubleshooting",permalink:"/docusaurus/docs/manage/troubleshooting"},next:{title:"On Demand",permalink:"/docusaurus/docs/metrics/inspect"}},p={},m=[{value:"Ziti Configuration",id:"ziti-configuration",level:2},{value:"Metrics Reporting",id:"metrics-reporting",level:3},{value:"Metrics Writing",id:"metrics-writing",level:3},{value:"Metrics Subscription",id:"metrics-subscription",level:4},{value:"Example:",id:"example",level:5},{value:"Metrics Handling",id:"metrics-handling",level:4},{value:"File Rolling",id:"file-rolling",level:5},{value:"Example",id:"example-1",level:4},{value:"Puting it all together",id:"puting-it-all-together",level:3},{value:"Metric Examples",id:"metric-examples",level:2},{value:"intValue",id:"intvalue",level:3},{value:"Histogram",id:"histogram",level:3},{value:"Timer",id:"timer",level:3}],c={toc:m};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"file-reporter"},"File Reporter"),(0,i.kt)("p",null,"The Ziti Controller event system can write metrics to a file for direct viewing or post-processing into a metrics system of your choice."),(0,i.kt)("h2",{id:"ziti-configuration"},"Ziti Configuration"),(0,i.kt)("p",null,"There are two independent configurations that need to be set up for metric event reporting to work:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Report Interval:")," The controller and routers need to have a metric reporting interval set.  The interval determines how often metrics will be sent to the controller and possibly written out to file"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Event Subscription:")," The subscription is configured in the controller, and determines which of the reported metrics are written.")),(0,i.kt)("h3",{id:"metrics-reporting"},"Metrics Reporting"),(0,i.kt)("p",null,"The reporting interval is defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"metrics.reportInterval")," property. While the controller and each router can have a different reporting interval, we suggest that you set them all the same to make lining up metrics across the cluster easier."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"metrics:\n  reportInterval: 20s\n")),(0,i.kt)("p",null,"Routers support an additional configuration parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageQueueSize")," which is the number of unsent metrics messages that can sit in the router metrics queue before metrics gathering is paused."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"metrics:\n  reportInterval: 20s\n  messageQueueSize: 20  // Default 10\n")),(0,i.kt)("h3",{id:"metrics-writing"},"Metrics Writing"),(0,i.kt)("p",null,"Writing of metrics is broken into two pieces:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"subscription:")," Which metrics will be written"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"hander:")," how the metrics will be written")),(0,i.kt)("h4",{id:"metrics-subscription"},"Metrics Subscription"),(0,i.kt)("p",null,"The metrics subscription defines which metrics will be written and how they will be written. "),(0,i.kt)("p",null,"There are two parts to a metrics event reporter\nThe subscription has three components"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"sourceFilter:")," Which components to write metrics for. This is a regular expression. ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ctrl_client:")," Special marker for the controller"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Router ID:")," Get metrics for one and only one router"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},".","*",":")," Get metrics from the controller and all routers"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"metricFilter:")," Which metrics to report.  This is a regular exporession",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},".","*","pool.","*",":")," Report only pool metrics"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},".","*",":")," Report all metrics")))),(0,i.kt)("h5",{id:"example"},"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"events:\n  allControllerMetrics:\n    subscriptions:\n      - type: metrics\n        sourceFilter: ctrl_client\n        metricFilter: .*\n  justEdgeRouterPoolMetrics:\n    subscriptions:\n      - type: metrics\n        sourceFilter: .*\n        metricFilter: .*pool.*\n")),(0,i.kt)("h4",{id:"metrics-handling"},"Metrics Handling"),(0,i.kt)("p",null,"The metrics handler defined how metrics are to be written.  It is comprised of:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"type:")," The type of handler.  Supported types are:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"file:")," Metrics will be written to a file")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"maxsizemb:")," File rolling - log files will be rolled when they reach this size.  Default size is ",(0,i.kt)("inlineCode",{parentName:"li"},"10mb"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"maxbackups")," File rolling - the number of files to keep. Default is ",(0,i.kt)("inlineCode",{parentName:"li"},"0 (unlimited)"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"format:")," The format of the metric.  Supported formats are: ",(0,i.kt)("inlineCode",{parentName:"li"},"json")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"path:")," The name of the file to write metrics to")),(0,i.kt)("h5",{id:"file-rolling"},"File Rolling"),(0,i.kt)("p",null,"files are rolled when they reach a size of ",(0,i.kt)("inlineCode",{parentName:"p"},"maxsizemb"),". Files are renamed from ",(0,i.kt)("inlineCode",{parentName:"p"},"name.log")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"name-iso8601.log")),(0,i.kt)("p",null,"For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"name-2022-06-07T18-50-44.568.log")),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("p",null,"Write 100mb files, saving 2 of them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    handler:\n      type: file\n      format: json\n      maxsizemb: 100\n      maxbackups: 2\n      path: /tmp/controller-metrics.log\n")),(0,i.kt)("h3",{id:"puting-it-all-together"},"Puting it all together"),(0,i.kt)("p",null,"Controller configuration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"metrics:\n  reportInterval: 20s\n\nevents:\n  allControllerMetrics:\n    subscriptions:\n      - type: metrics\n        sourceFilter: ctrl_client\n        metricFilter: .*\n    handler:\n      type: file\n      format: json\n      maxsizemb: 50\n      maxbackups: 2\n      path: /tmp/controller-metrics.log\n\n  justPoolMetrics:\n    subscriptions:\n      - type: metrics\n        sourceFilter: .*\n        metricFilter: .*pool.*\n    handler:\n      type: file\n      format: json\n      maxsizemb: 100\n      maxbackups: 5\n      path: /tmp/router-pool-metrics.log\n")),(0,i.kt)("p",null,"Router configuration files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"metrics:\n  reportInterval: 20s\n")),(0,i.kt)(l.default,{mdxType:"MetricTypesMd"}),(0,i.kt)("h2",{id:"metric-examples"},"Metric Examples"),(0,i.kt)("h3",{id:"intvalue"},"intValue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "metric_type": "intValue",\n  "namespace": "metrics",\n  "source_id": "ctrl_client",\n  "version": 2,\n  "timestamp": {\n    "seconds": 1654625684,\n    "nanos": 479708609\n  },\n  "metric": "pool.listener.mgmt.worker_count",\n  "metrics": {\n    "value": 1\n  },\n  "source_event_id": "acb85925-0e17-4ca0-90cb-9a2498b33bc8"\n}\n')),(0,i.kt)("h3",{id:"histogram"},"Histogram"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "metric_type": "histogram",\n  "namespace": "metrics",\n  "source_id": "ctrl_client",\n  "source_entity_id": "xpw7BEDAk",\n  "version": 2,\n  "timestamp": {\n    "seconds": 1654625684,\n    "nanos": 479708609\n  },\n  "metric": "ctrl.queue_time",\n  "metrics": {\n    "count": 57,\n    "max": 21647,\n    "mean": 15266.508771929824,\n    "min": 5753,\n    "p50": 15670,\n    "p75": 16558.5,\n    "p95": 18362.699999999997,\n    "p99": 21647,\n    "p999": 21647,\n    "p9999": 21647,\n    "std_dev": 2604.8795245927113,\n    "variance": 6785397.337642349\n  },\n  "source_event_id": "acb85925-0e17-4ca0-90cb-9a2498b33bc8"\n}\n')),(0,i.kt)("h3",{id:"timer"},"Timer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "metric_type": "timer",\n  "namespace": "metrics",\n  "source_id": "ctrl_client",\n  "version": 2,\n  "timestamp": {\n    "seconds": 1654625684,\n    "nanos": 479708609\n  },\n  "metric": "api.session.enforcer.run",\n  "metrics": {\n    "count": 11,\n    "m15_rate": 0.2,\n    "m1_rate": 0.2,\n    "m5_rate": 0.2,\n    "max": 6842849,\n    "mean": 1096126.3636363635,\n    "mean_rate": 0.20374652060865114,\n    "min": 254514,\n    "p50": 335348,\n    "p75": 1212318,\n    "p95": 6842849,\n    "p99": 6842849,\n    "p999": 6842849,\n    "p9999": 6842849,\n    "std_dev": 1858257.4031879376,\n    "variance": 3453120576502.777\n  },\n  "source_event_id": "acb85925-0e17-4ca0-90cb-9a2498b33bc8"\n}\n')))}u.isMDXComponent=!0},7078:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const l={},a="Types of Metrics Reported",o={unversionedId:"metrics/metric-types",id:"metrics/metric-types",title:"Types of Metrics Reported",description:"Ziti is instrumenting more code and adding additional metrics all of the time. This section will describe the different types of metrics that ziti reports, not individual metric names.",source:"@site/docs/metrics/metric-types.md",sourceDirName:"metrics",slug:"/metrics/metric-types",permalink:"/docusaurus/docs/metrics/metric-types",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/metrics/metric-types.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"On Demand",permalink:"/docusaurus/docs/metrics/inspect"},next:{title:"Ziti Metrics",permalink:"/docusaurus/docs/metrics/overview"}},s={},p=[{value:"intValue/floatValue",id:"intvaluefloatvalue",level:2},{value:"Histogram",id:"histogram",level:2},{value:"Timer",id:"timer",level:2}],m={toc:p};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"types-of-metrics-reported"},"Types of Metrics Reported"),(0,i.kt)("p",null,"Ziti is instrumenting more code and adding additional metrics all of the time. This section will describe the different types of metrics that ziti reports, not individual metric names."),(0,i.kt)("h2",{id:"intvaluefloatvalue"},"intValue/floatValue"),(0,i.kt)("p",null,"A gauge of a single value.  The value is the current metric value, and can go up and down over time"),(0,i.kt)("h2",{id:"histogram"},"Histogram"),(0,i.kt)("p",null,"Standard histogram with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"min"),(0,i.kt)("li",{parentName:"ul"},"max"),(0,i.kt)("li",{parentName:"ul"},"mean"),(0,i.kt)("li",{parentName:"ul"},"stdev"),(0,i.kt)("li",{parentName:"ul"},"variance"),(0,i.kt)("li",{parentName:"ul"},"percentiles",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"p50"),(0,i.kt)("li",{parentName:"ul"},"p75"),(0,i.kt)("li",{parentName:"ul"},"p95"),(0,i.kt)("li",{parentName:"ul"},"p99"),(0,i.kt)("li",{parentName:"ul"},"p999"),(0,i.kt)("li",{parentName:"ul"},"p9999")))),(0,i.kt)("h2",{id:"timer"},"Timer"),(0,i.kt)("p",null,"Timer metric with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"count"),(0,i.kt)("li",{parentName:"ul"},"m1_rate"),(0,i.kt)("li",{parentName:"ul"},"m5_rate"),(0,i.kt)("li",{parentName:"ul"},"m15_rate"),(0,i.kt)("li",{parentName:"ul"},"min"),(0,i.kt)("li",{parentName:"ul"},"max"),(0,i.kt)("li",{parentName:"ul"},"mean"),(0,i.kt)("li",{parentName:"ul"},"std_dev"),(0,i.kt)("li",{parentName:"ul"},"variance"),(0,i.kt)("li",{parentName:"ul"},"percentiles",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"p50"),(0,i.kt)("li",{parentName:"ul"},"p75"),(0,i.kt)("li",{parentName:"ul"},"p95"),(0,i.kt)("li",{parentName:"ul"},"p99"),(0,i.kt)("li",{parentName:"ul"},"p999"),(0,i.kt)("li",{parentName:"ul"},"p9999")))))}c.isMDXComponent=!0}}]);