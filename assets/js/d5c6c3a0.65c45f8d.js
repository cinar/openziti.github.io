"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[9658],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81873:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const a={title:"Kubernetes Node Daemonset",sidebar_label:"Node Proxy",sidebar_position:70},i=void 0,s={unversionedId:"guides/kubernetes/workload-tunneling/kubernetes-daemonset",id:"guides/kubernetes/workload-tunneling/kubernetes-daemonset",title:"Kubernetes Node Daemonset",description:"This daemonset manifest installs a privileged Ziti tunneler on each selected node. The tunneler provides a nameserver to CoreDNS for resolving Ziti addresses, and IP routes to capture pod egress for Ziti services.",source:"@site/docs/guides/kubernetes/workload-tunneling/kubernetes-daemonset.md",sourceDirName:"guides/kubernetes/workload-tunneling",slug:"/guides/kubernetes/workload-tunneling/kubernetes-daemonset",permalink:"/docs/guides/kubernetes/workload-tunneling/kubernetes-daemonset",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/kubernetes/workload-tunneling/kubernetes-daemonset.md",tags:[],version:"current",sidebarPosition:70,frontMatter:{title:"Kubernetes Node Daemonset",sidebar_label:"Node Proxy",sidebar_position:70},sidebar:"docsSidebar",previous:{title:"Reverse Proxy Pod",permalink:"/docs/guides/kubernetes/workload-tunneling/kubernetes-host"},next:{title:"Sidecar Proxy",permalink:"/docs/guides/kubernetes/workload-tunneling/kubernetes-sidecar"}},l={},u=[{value:"Configure CoreDNS",id:"configure-coredns",level:2}],c={toc:u},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This ",(0,o.kt)("a",{parentName:"p",href:"https://get.openziti.io/tun/docker/ziti-tun-daemonset.yaml"},"daemonset manifest")," installs a privileged Ziti tunneler on each selected node. The tunneler provides a nameserver to CoreDNS for resolving Ziti addresses, and IP routes to capture pod egress for Ziti services. "),(0,o.kt)("h2",{id:"configure-coredns"},"Configure CoreDNS"),(0,o.kt)("p",null,"The default nameserver address is ",(0,o.kt)("inlineCode",{parentName:"p"},"100.64.0.2"),", but containers don't automatically use it until you configure cluster DNS. CoreDNS doesn't currently have a fallthrough mechanism, but you can use conventional names for your OpenZiti services' like ",(0,o.kt)("inlineCode",{parentName:"p"},"*.ziti"),", and configure CoreDNS to forward queries that match that namespace to the OpenZiti nameserver."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"apiVersion: v1\ndata:\n  Corefile: |\n    .:53 {\n        errors\n        health {\n           lameduck 5s\n        }\n        ready\n        kubernetes cluster.local in-addr.arpa ip6.arpa {\n           pods insecure\n           fallthrough in-addr.arpa ip6.arpa\n           ttl 30\n        }\n        prometheus :9153\n        forward . /etc/resolv.conf {\n           max_concurrent 1000\n        }\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\n    ziti {\n        forward . 100.64.0.2\n    }\n")),(0,o.kt)("p",null,"Some Kubernetes distributions provide a method for persisting CoreDNS configuration, e.g., the ",(0,o.kt)("inlineCode",{parentName:"p"},"import")," plugin. A common pattern is for the CoreDNS pod to mount a configmap with a particular name in the ",(0,o.kt)("inlineCode",{parentName:"p"},"kube-system")," namespace, e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"coredns-custom")," on a directory like ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/coredns/custom/")," with an aligned statement in the Corefile like ",(0,o.kt)("inlineCode",{parentName:"p"},"import /etc/coredns/custom/*.server"),". The CoreDNS customization configmap then has contents like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns-custom\n  namespace: kube-system\ndata:\n  ziti.server: |\n    ziti {\n      forward . 100.64.0.2\n    }\n")),(0,o.kt)("p",null,"The result is that CoreDNS automatically includes Corefile server blocks from the customization configmap."))}p.isMDXComponent=!0}}]);