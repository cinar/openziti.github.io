"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[6226],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>g});var n=i(67294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(i),h=o,g=p["".concat(c,".").concat(h)]||p[h]||u[h]||r;return i?n.createElement(g,a(a({ref:t},d),{},{components:i})):n.createElement(g,a({ref:t},d))}));function g(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=i.length,a=new Array(r);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<r;l++)a[l]=i[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},90775:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var n=i(87462),o=(i(67294),i(3905)),r=i(67314);const a={id:"components",title:"Components"},s=void 0,c={unversionedId:"introduction/components",id:"introduction/components",title:"Components",description:"",source:"@site/docs/introduction/03-components.md",sourceDirName:"introduction",slug:"/introduction/components",permalink:"/docs/introduction/components",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/introduction/03-components.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"components",title:"Components"},sidebar:"rootSidebar",previous:{title:"What is OpenZiti?",permalink:"/docs/introduction/"},next:{title:"Key Concepts",permalink:"/docs/introduction/key_concepts"}},l={},d=[],p={toc:d};function u(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(r.ZP,{mdxType:"ComponentsMd"}))}u.isMDXComponent=!0},67314:(e,t,i)=>{i.d(t,{ZP:()=>a});var n=i(87462),o=(i(67294),i(3905));const r={toc:[{value:"Deployed Components",id:"deployed-components",level:2},{value:"OpenZiti Controller",id:"openziti-controller",level:3},{value:"OpenZiti Router",id:"openziti-router",level:3},{value:"OpenZiti Edge Clients",id:"openziti-edge-clients",level:3},{value:"Logical Components",id:"logical-components",level:2},{value:"Services",id:"services",level:3},{value:"Identities",id:"identities",level:3},{value:"Policies",id:"policies",level:3},{value:"Role Attributes",id:"role-attributes",level:4},{value:"Service Policies",id:"service-policies",level:4},{value:"Edge Router Policies",id:"edge-router-policies",level:4},{value:"Service Edge Router Policies",id:"service-edge-router-policies",level:4}]};function a(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},r,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"deployed-components"},"Deployed Components"),(0,o.kt)("h3",{id:"openziti-controller"},"OpenZiti Controller"),(0,o.kt)("p",null,"The OpenZiti Controller is the central function of the\nOpenZiti Network. The OpenZiti Controller provides the\nconfiguration plane. It is responsible for configuring OpenZiti services\nas well as being the central point for managing the identities\nused by users, devices and the nodes making up the OpenZiti Network.\nLastly but critically, the OpenZiti Controller is responsible for\nauthentication and authorization for every connection in the OpenZiti\nNetwork."),(0,o.kt)("p",null,"The OpenZiti Controller must be configured with public key infrastructure\n(PKI). The configured PKI is used to create secure, mutually-\nauthenticated TLS (mTLS) network connections between any two\npieces of the OpenZiti Network. The OpenZiti Controller does not provide its\nown PKI but for the OpenZiti Controller to sign certificate requests (CSR)\nthe OpenZiti Controller will need to be configured with a key and\ncertificate used for signing. The OpenZiti CLI can generate a PKI."),(0,o.kt)("p",null,"The OpenZiti Controller also supports using a third-party PKI should the\noperator of the OpenZiti Network have an existing PKI they wish to\nreuse. Utilizing a third-party CA pushes the burden of obtaining\nand distributing properly signed certificates to the operator of\nthe OpenZiti Network but for sophisticated customers this might make\noverall management of the network easier.\nThe OpenZiti Controller uses a local database based on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/etcd-io/bbolt"},"bbolt")," to\nstore the information needed to manage the network."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/operations/controller"},"Controller Deployment Guide")),(0,o.kt)("h3",{id:"openziti-router"},"OpenZiti Router"),(0,o.kt)("p",null,"OpenZiti Routers are the fundamental building blocks of the OpenZiti\nNetwork. These routers are responsible for securely and reliably\ndelivering traffic from one OpenZiti Network node to the destination."),(0,o.kt)("p",null,"Ziti Routers are linked together to form a mesh network. This mesh is\nconstantly being monitored for latency and the fastest paths are\nused when routing traffic to the destination. The monitoring also\nallows for active failover to ensure a reliable network connection\neven in the case of a node failure."),(0,o.kt)("p",null,"The OpenZiti Router is the entry point to the OpenZiti Network for client connections.\nThe OpenZiti Router in combination with the Ziti Controller is responsible\nfor authenticating and authorizing OpenZiti Edge Clients."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/operations/router/deployment"},"Router Deployment Guide")),(0,o.kt)("h3",{id:"openziti-edge-clients"},"OpenZiti Edge Clients"),(0,o.kt)("p",null,"Connecting to the OpenZiti Network requires an OpenZiti Edge Client. Edge\nClients are designed to work with both brownfield and greenfield\napplications."),(0,o.kt)("p",null,"If the solution being developed includes developing new\nsoftware OpenZiti offers SDKs targeting various languages\nand runtimes to provide fast, reliable and secure connectivity.\nThese SDKs provide the capabilities needed to securely connect\nto the OpenZiti Network and are designed to be easily incorporated\ninto the target application."),(0,o.kt)("p",null,"When adding secure connectivity to an already existing solution\nOpenZiti offers specialized Edge Clients called tunnelers\nwhich provide seamless, secure connectivity and do not require\nchanges to the target application."),(0,o.kt)("p",null,"Read more about ",(0,o.kt)("a",{parentName:"p",href:"/docs/core-concepts/clients/choose"},"clients")),(0,o.kt)("h2",{id:"logical-components"},"Logical Components"),(0,o.kt)("p",null,"Once the OpenZiti Network is established and deployed the next step\nis to configure the software-powered network. The three main\nconcepts necessary to configure an OpenZiti Network are: Identities,\nServices, and Policies."),(0,o.kt)("h3",{id:"services"},"Services"),(0,o.kt)("p",null,'A service encapsulates the definition of any resource that could\nbe accessed by a client on a traditional network. An OpenZiti Service is\ndefined by a strong, extensible identity, rather than by an\nexpression of an underlay concept. This means that services\ndefined on an OpenZiti Network have an almost limitless "namespace"\navailable for identifying services. An OpenZiti Service is defined by a\nname and/or a certificate, rather than by a DNS name or an IP\naddress (underlay concepts). Services also declare a node where\ntraffic that exits the OpenZiti Network needs to be sent do before\nexiting. It\u2019s possible for the node traffic enters to be the same it\nexits and it\u2019s possible for traffic needing to traverse the OpenZiti\nNetwork Routers to reach the correct node. Simply specifying the\nnode is all the end-user need do, the OpenZiti Network handles the\nrest.'),(0,o.kt)("p",null,"Read more about ",(0,o.kt)("a",{parentName:"p",href:"/docs/core-concepts/services/overview"},"services")),(0,o.kt)("h3",{id:"identities"},"Identities"),(0,o.kt)("p",null,"Identities represent individual endpoints in the OpenZiti Network\nwhich can establish connectivity. All connections made within the\nOpenZiti Network are mutually authenticated using X509 Certificates.\nEvery Identity is mapped to a given certificate\u2019s signature. OpenZiti\nEdge Clients present this certificate when initiating connections\nto the OpenZiti Network. The presented certificate is used by the OpenZiti\nNetwork to authorize the client and enumerate the services the\nIdentity is authorized to use."),(0,o.kt)("p",null,"Read more about ",(0,o.kt)("a",{parentName:"p",href:"/docs/core-concepts/identities/overview"},"identities")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/core-concepts/security/authentication/auth"},"authentication"),"."),(0,o.kt)("h3",{id:"policies"},"Policies"),(0,o.kt)("p",null,"Policies control how Identities, Services and Edge Routers are allowed\nto interact. In order to use a service the identity must be granted\naccess to the service. Also, since all access to a service goes through\none more edge routers, both the service and the identity must be\ngranted to access to the same edge router or edge routers."),(0,o.kt)("h4",{id:"role-attributes"},"Role Attributes"),(0,o.kt)("p",null,"Entities such as identities, services and edge routers can be added to\npolicies explicity, either by id or name. Entities can  also be tagged\nwith role attributes. Role attributes are simple strings like ",(0,o.kt)("inlineCode",{parentName:"p"},"sales"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"Boston"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"us-employees")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"support"),". Their meaning is decided by the\nadministrator. Policies can include entities by specifying a set of role\nattributes to match."),(0,o.kt)("h4",{id:"service-policies"},"Service Policies"),(0,o.kt)("p",null,"Service Policies encapsulate the mapping between identities and\nservices in a software-powered network. In the simplest terms,\nService Policies are a group of services and a group of identities.\nThe act of adding a service to a Service Policy will grant the\nidentities in that Service Policy access to the given service.\nSimilarly, adding an identity to a Service Policy will grant that\nidentity access to the services mapped in that Service Policy."),(0,o.kt)("p",null,"Service policies controls both which identities may dial a service (use the service)\nand which identities may bind a service (provide or host the service).\nEach Service Policy may either grant dial or bind access, but not both."),(0,o.kt)("h4",{id:"edge-router-policies"},"Edge Router Policies"),(0,o.kt)("p",null,"Edge Router Policies manage the mapping between identities and\nedge routers. Edge Router Policies are a group of edge routers\nand a group of identities. Adding an edge router to an Edge\nRouter Policy will grant the identities in that Edge Router\nPolicy access to the given edge router. Similarly, adding an identity\nto an Edge Router Policy will grant that identity access to the\nedge routers mapped in that Edge Router Policy."),(0,o.kt)("h4",{id:"service-edge-router-policies"},"Service Edge Router Policies"),(0,o.kt)("p",null,"Service Edge Router Policies manage the mapping between services and\nedge routers. Service Edge Router Policies are a group of edge routers\nand a group of services. Adding an edge router to a Service Edge\nRouter Policy will grant the services in that Service Edge Router\nPolicy access to the given edge router. Similarly, adding a service\nto a Service Edge Router Policy will grant that service access to the\nedge routers mapped in that Service Edge Router Policy."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/core-concepts/security/authorization/policies/overview"},"Read more about authorization")))}a.isMDXComponent=!0}}]);