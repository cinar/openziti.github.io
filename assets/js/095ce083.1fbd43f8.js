"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[6102],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),g=o,m=d["".concat(l,".").concat(g)]||d[g]||p[g]||i;return t?r.createElement(m,a(a({ref:n},c),{},{components:t})):r.createElement(m,a({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>a});var r=t(67294),o=t(86010);const i="tabItem_Ymn6";function a(e){let{children:n,hidden:t,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(i,a),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>g});var r=t(87462),o=t(67294),i=t(86010),a=t(72389),s=t(67392),l=t(7094),u=t(12466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){const{lazy:n,block:t,defaultValue:a,values:p,groupId:g,className:m}=e,T=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??T.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),E=(0,s.l)(f,((e,n)=>e.value===n.value));if(E.length>0)throw new Error(`Docusaurus error: Duplicate values "${E.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===a?a:a??T.find((e=>e.props.default))?.props.value??T[0].props.value;if(null!==h&&!f.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:R,setTabGroupChoices:_}=(0,l.U)(),[b,y]=(0,o.useState)(h),I=[],{blockElementScrollPositionUntilNextRender:v}=(0,u.o5)();if(null!=g){const e=R[g];null!=e&&e!==b&&f.some((n=>n.value===e))&&y(e)}const k=e=>{const n=e.currentTarget,t=I.indexOf(n),r=f[t].value;r!==b&&(v(n),y(r),null!=g&&_(g,String(r)))},O=e=>{let n=null;switch(e.key){case"Enter":k(e);break;case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;n=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;n=I[t]??I[I.length-1];break}}n?.focus()};return o.createElement("div",{className:(0,i.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},m)},f.map((e=>{let{value:n,label:t,attributes:a}=e;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,key:n,ref:e=>I.push(e),onKeyDown:O,onClick:k},a,{className:(0,i.Z)("tabs__item",d,a?.className,{"tabs__item--active":b===n})}),t??n)}))),n?(0,o.cloneElement)(T.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},T.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==b})))))}function g(e){const n=(0,a.Z)();return o.createElement(p,(0,r.Z)({key:String(n)},e))}},32375:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var r=t(87462),o=(t(67294),t(3905)),i=t(65488),a=t(85162);t(27728);const s={id:"router-configuration",title:"Config Examples",hide_table_of_contents:!0},l=void 0,u={unversionedId:"guides/router/router-configuration",id:"guides/router/router-configuration",title:"Config Examples",description:"Commented out options with # tag are generated by the template but not used for the described deployment. The router ip address is used in the private router option, wheres the DNS name is used in the public router. This is only to illustrate how either type can be used as an option for any deployment type.",source:"@site/docs/guides/02-router/02-configuration.md",sourceDirName:"guides/02-router",slug:"/guides/router/router-configuration",permalink:"/docs/guides/router/router-configuration",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/02-router/02-configuration.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"router-configuration",title:"Config Examples",hide_table_of_contents:!0},sidebar:"docsSidebar",previous:{title:"Router Deployment",permalink:"/docs/guides/router/deployment"},next:{title:"CLI Mgmt",permalink:"/docs/guides/router/cli-mgmt"}},c={},d=[{value:"Generated Configuration",id:"generated-configuration",level:2},{value:"Generated Configuration",id:"generated-configuration-1",level:2},{value:"Generated Configuration",id:"generated-configuration-2",level:2}],p={toc:d};function g(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Notes",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Commented out options with ",(0,o.kt)("inlineCode",{parentName:"p"},"#")," tag are generated by the template but not used for the described deployment. The router ip address is used in the private router option, wheres the DNS name is used in the public router. This is only to illustrate how either type can be used as an option for any deployment type.")),(0,o.kt)(i.Z,{groupId:"routerType",mdxType:"Tabs"},(0,o.kt)(a.Z,{value:"Private",label:"Private Router w/ Edge",mdxType:"TabItem"},(0,o.kt)("p",null,"This is a network side dialing only router with edge. It does not listen for connections from other routers. Set environmental variables to match this type of deployment, and run the command shown."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'ZITI_CTRL_ADVERTISED_ADDRESS=controller01.zitinetwork.example.org\nZITI_CTRL_PORT=80\nZITI_ROUTER_ADVERTISED_HOST="192.168.10.11"\nZITI_EDGE_ROUTER_IP_OVERRIDE="192.168.10.11"\nZITI_EDGE_ROUTER_PORT=443\nROUTER_NAME=$ZITI_ROUTER_ADVERTISED_HOST\nZITI_ROUTER_IDENTITY_CERT="~/.ziti/config/certs/${ROUTER_NAME}.cert"\nZITI_ROUTER_IDENTITY_SERVER_CERT="~/.ziti/config/certs/${ROUTER_NAME}.server.chain.cert"\nZITI_ROUTER_IDENTITY_KEY="~/.ziti/config/certs/${ROUTER_NAME}.key"\nZITI_ROUTER_IDENTITY_CA="~/.ziti/config/certs/${ROUTER_NAME}.cas"\n\n./ziti create config router edge --routerName  $ROUTER_NAME \\\n                                --output $ROUTER_NAME.yaml \\\n                                --tunnelerMode none \\\n                                --private\n')),(0,o.kt)("h2",{id:"generated-configuration"},"Generated Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'v: 3\n\nidentity:\n    cert:                 "~/.ziti/config/certs/192.168.10.11.cert"\n    server_cert:          "~/.ziti/config/certs/192.168.10.11.server.chain.cert"\n    key:                  "~/.ziti/config/certs/192.168.10.11.key"\n    ca:                   "~/.ziti/config/certs/192.168.10.11.cas"\n\nctrl:\n    endpoint:             tls:controller01.zitinetwork.example.org:80\n\nlink:\n    dialers:\n        - binding: transport\n#  listeners:\n#    - binding:          transport\n#      bind:             tls:0.0.0.0:10080\n#      advertise:        tls:192.168.10.11:10080\n#      options:\n#        outQueueSize:   4\n\nlisteners:\n# bindings of edge and tunnel requires an "edge" section below\n  - binding: edge\n    address: tls:0.0.0.0:443\n    options:\n        advertise: 192.168.10.11:443\n        connectTimeoutMs: 1000\n        getSessionTimeout: 60\n#  - binding: tunnel\n#    options:\n#      mode: host #tproxy|host\n\n\n\nedge:\n    csr:\n        country: US\n        province: NC\n        locality: Charlotte\n        organization: NetFoundry\n        organizationalUnit: Ziti\n        sans:\n            dns:\n                - Windows-Workstation\n                - localhost\n            ip:\n                - "127.0.0.1"\n                - "192.168.10.11"\n\n#transport:\n#  ws:\n#    writeTimeout: 10\n#    readTimeout: 5\n#    idleTimeout: 5\n#    pongTimeout: 60\n#    pingInterval: 54\n#    handshakeTimeout: 10\n#    readBufferSize: 4096\n#    writeBufferSize: 4096\n#    enableCompression: true\n#    server_cert: ~/.ziti/config/certs/192.168.10.11.server.chain.cert\n#    key: ~/.ziti/config/certs/192.168.10.11.key\n\nforwarder:\n    latencyProbeInterval: 10\n    xgressDialQueueLength: 1000\n    xgressDialWorkerCount: 128\n    linkDialQueueLength: 1000\n    linkDialWorkerCount: 32\n'))),(0,o.kt)(a.Z,{value:"Gateway",label:"Private Router w/ Edge & Tunneler",mdxType:"TabItem"},(0,o.kt)("p",null,"This is a network side dialing only router with edge and tunneler( i.e. gateway mode). It does not listen for connections from other routers. Set environmental variables to match this type of deployment, and run the command shown."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'ZITI_CTRL_ADVERTISED_ADDRESS=controller01.zitinetwork.example.org\nZITI_CTRL_PORT=80\nZITI_ROUTER_ADVERTISED_HOST="192.168.10.11"\nZITI_EDGE_ROUTER_IP_OVERRIDE="192.168.10.11"\nZITI_EDGE_ROUTER_PORT=443\nROUTER_NAME=$ZITI_ROUTER_ADVERTISED_HOST\nZITI_ROUTER_IDENTITY_CERT="~/.ziti/config/certs/${ROUTER_NAME}.cert"\nZITI_ROUTER_IDENTITY_SERVER_CERT="~/.ziti/config/certs/${ROUTER_NAME}.server.chain.cert"\nZITI_ROUTER_IDENTITY_KEY="~/.ziti/config/certs/${ROUTER_NAME}.key"\nZITI_ROUTER_IDENTITY_CA="~/.ziti/config/certs/${ROUTER_NAME}.cas"\n\n./ziti create config router edge --routerName  $ROUTER_NAME \\\n                                --output $ROUTER_NAME.yaml \\\n                                --tunnelerMode tproxy \\\n                                --lanInterface eth0 \\\n                                --private\n')),(0,o.kt)("h2",{id:"generated-configuration-1"},"Generated Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'v: 3\n\nidentity:\n    cert:                 "~/.ziti/config/certs/192.168.10.11.cert"\n    server_cert:          "~/.ziti/config/certs/192.168.10.11.server.chain.cert"\n    key:                  "~/.ziti/config/certs/192.168.10.11.key"\n    ca:                   "~/.ziti/config/certs/192.168.10.11.cas"\n\nctrl:\n    endpoint:             tls:controller01.zitinetwork.example.org:80\n\nlink:\n    dialers:\n        - binding: transport\n#  listeners:\n#    - binding:          transport\n#      bind:             tls:0.0.0.0:10080\n#      advertise:        tls:192.168.10.11:10080\n#      options:\n#        outQueueSize:   4\n\nlisteners:\n# bindings of edge and tunnel requires an "edge" section below\n  - binding: edge\n    address: tls:0.0.0.0:443\n    options:\n        advertise: 192.168.10.11:443\n        connectTimeoutMs: 1000\n        getSessionTimeout: 60\n  - binding: tunnel\n    options:\n        mode: tproxy #tproxy|host\n        resolver: udp://192.168.10.11:53\n        lanIf: eth0\n\nedge:\n    csr:\n        country: US\n        province: NC\n        locality: Charlotte\n        organization: NetFoundry\n        organizationalUnit: Ziti\n        sans:\n            dns:\n                - Windows-Workstation\n                - localhost\n            ip:\n                - "127.0.0.1"\n                - "192.168.10.11"\n\n#transport:\n#  ws:\n#    writeTimeout: 10\n#    readTimeout: 5\n#    idleTimeout: 5\n#    pongTimeout: 60\n#    pingInterval: 54\n#    handshakeTimeout: 10\n#    readBufferSize: 4096\n#    writeBufferSize: 4096\n#    enableCompression: true\n#    server_cert: ~/.ziti/config/certs/192.168.10.11.server.chain.cert\n#    key: ~/.ziti/config/certs/192.168.10.11.key\n\nforwarder:\n    latencyProbeInterval: 10\n    xgressDialQueueLength: 1000\n    xgressDialWorkerCount: 128\n    linkDialQueueLength: 1000\n    linkDialWorkerCount: 32\n'))),(0,o.kt)(a.Z,{value:"Public-Edge",label:"Public Router w/ Edge",mdxType:"TabItem"},(0,o.kt)("p",null,"This is a network side dialing and listening router with edge. It listens for connections from other routers. The host firewall needs to be opened to allow connections through. In this example code, the listen ports are 80 and 443. Set environmental variables to match this type of deployment, and run the command shown."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'ZITI_CTRL_ADVERTISED_ADDRESS=controller01.zitinetwork.example.org\nZITI_CTRL_PORT=80\nZITI_EDGE_ROUTER_RAWNAME=router01.zitinetwork.example.org\nZITI_EDGE_ROUTER_PORT=443\nROUTER_NAME=$ZITI_EDGE_ROUTER_RAWNAME\nZITI_ROUTER_IDENTITY_CERT="~/.ziti/config/certs/${ROUTER_NAME}.cert"\nZITI_ROUTER_IDENTITY_SERVER_CERT="~/.ziti/config/certs/${ROUTER_NAME}.server.chain.cert"\nZITI_ROUTER_IDENTITY_KEY="~/.ziti/config/certs/${ROUTER_NAME}.key"\nZITI_ROUTER_IDENTITY_CA="~/.ziti/config/certs/${ROUTER_NAME}.cas"\n\n./ziti create config router edge --routerName  $ROUTER_NAME \\\n                                --output $ROUTER_NAME.yaml \\\n                                --tunnelerMode none\n')),(0,o.kt)("h2",{id:"generated-configuration-2"},"Generated Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'v: 3\n\nidentity:\n    cert:                 "~/.ziti/config/certs/router01.zitinetwork.example.org.cert"\n    server_cert:          "~/.ziti/config/certs/router01.zitinetwork.example.org.server.chain.cert"\n    key:                  "~/.ziti/config/certs/router01.zitinetwork.example.org.key"\n    ca:                   "~/.ziti/config/certs/router01.zitinetwork.example.org.cas"\n\nctrl:\n    endpoint:             tls:controller01.zitinetwork.example.org:80\n\nlink:\n    dialers:\n        - binding: transport\n    listeners:\n        - binding:          transport\n        bind:             tls:0.0.0.0:10080\n        advertise:        tls:router01.zitinetwork.example.org:10080\n        options:\n            outQueueSize:   4\n\nlisteners:\n# bindings of edge and tunnel requires an "edge" section below\n  - binding: edge\n    address: tls:0.0.0.0:443\n    options:\n        advertise: router01.zitinetwork.example.org:443\n        connectTimeoutMs: 1000\n        getSessionTimeout: 60\n#  - binding: tunnel\n#    options:\n#      mode: host #tproxy|host\n\n\n\nedge:\n    csr:\n        country: US\n        province: NC\n        locality: Charlotte\n        organization: NetFoundry\n        organizationalUnit: Ziti\n        sans:\n            dns:\n                - router01.zitinetwork.example.org\n                - localhost\n            ip:\n                - "127.0.0.1"\n\n#transport:\n#  ws:\n#    writeTimeout: 10\n#    readTimeout: 5\n#    idleTimeout: 5\n#    pongTimeout: 60\n#    pingInterval: 54\n#    handshakeTimeout: 10\n#    readBufferSize: 4096\n#    writeBufferSize: 4096\n#    enableCompression: true\n#    server_cert: ~/.ziti/config/certs/router01.zitinetwork.example.org.server.chain.cert\n#    key: ~/.ziti/config/certs/router01.zitinetwork.example.org.key\n\nforwarder:\n    latencyProbeInterval: 10\n    xgressDialQueueLength: 1000\n    xgressDialWorkerCount: 128\n    linkDialQueueLength: 1000\n    linkDialWorkerCount: 32\n')))))}g.isMDXComponent=!0},27728:()=>{}}]);