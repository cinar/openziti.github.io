"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[5357],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||r;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var i=n(7294),a=n(6010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>h});var i=n(7462),a=n(7294),r=n(6010),o=n(2389),l=n(875),s=n(7094),c=n(2466);const d="tabList__CuJ",u="tabItem_LNqP";function p(e){var t;const{lazy:n,block:o,defaultValue:p,values:h,groupId:m,className:f}=e,y=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=h??y.map((e=>{let{props:{value:t,label:n,attributes:i}}=e;return{value:t,label:n,attributes:i}})),g=(0,l.l)(k,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===p?p:p??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==v&&!k.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:w}=(0,s.U)(),[T,C]=(0,a.useState)(v),A=[],{blockElementScrollPositionUntilNextRender:O}=(0,c.o5)();if(null!=m){const e=b[m];null!=e&&e!==T&&k.some((t=>t.value===e))&&C(e)}const E=e=>{const t=e.currentTarget,n=A.indexOf(t),i=k[n].value;i!==T&&(O(t),C(i),null!=m&&w(m,String(i)))},N=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=A.indexOf(e.currentTarget)+1;n=A[t]??A[0];break}case"ArrowLeft":{const t=A.indexOf(e.currentTarget)-1;n=A[t]??A[A.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",d)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":o},f)},k.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>A.push(e),onKeyDown:N,onFocus:E,onClick:E},o,{className:(0,r.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,a.cloneElement)(y.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function h(e){const t=(0,o.Z)();return a.createElement(p,(0,i.Z)({key:String(t)},e))}},6813:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>k,frontMatter:()=>u,metadata:()=>h,toc:()=>f});var i=n(7462),a=(n(7294),n(3905));const r={toc:[]};function o(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#creates a new user named "NewUser"\nziti edge create identity user "NewUser" -o NewUser.jwt\n')))}o.isMDXComponent=!0;const l={toc:[]};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    Verb: POST\n\n    name:\n      The name of the CA to create\n    isAutoCaEnrollmentEnabled:\n      controls if the CA can be used for automatic enrollment\n    isOttCaEnrollmentEnabled:\n      controls if the CA be used for one time token enrollment\n    isAuthEnabled:\n      controls if the CA is enabled for authentication. Devices can enroll but not connect if set to false\n    certPem:\n      the CA to upload in PEM format\n    body:\n    {\n      "name": "${string}",\n      "isAutoCaEnrollmentEnabled": ${true|false},\n      "isOttCaEnrollmentEnabled": ${true|false},\n      "isAuthEnabled": ${true|false},\n      "certPem": "${string}"\n    }\n')))}s.isMDXComponent=!0;var c=n(5488),d=n(5162);const u={title:"Creating"},p=void 0,h={unversionedId:"core-concepts/identities/creating",id:"core-concepts/identities/creating",title:"Creating",description:"",source:"@site/docs/core-concepts/identities/10-creating.mdx",sourceDirName:"core-concepts/identities",slug:"/core-concepts/identities/creating",permalink:"/docs/core-concepts/identities/creating",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/core-concepts/identities/10-creating.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Creating"},sidebar:"rootSidebar",previous:{title:"Ziti Identities",permalink:"/docs/core-concepts/identities/overview"},next:{title:"Enrolling",permalink:"/docs/core-concepts/identities/enrolling"}},m={},f=[{value:"Creating an Identity",id:"creating-an-identity",level:2},{value:"Choosing an Enrollment Method",id:"choosing-an-enrollment-method",level:2},{value:"One Time Token (OTT)",id:"one-time-token-ott",level:3},{value:"3rd Party CA - Overview",id:"3rd-party-ca---overview",level:3},{value:"Adding a 3rd Party CA to the Ziti Controller",id:"adding-a-3rd-party-ca-to-the-ziti-controller",level:4},{value:"3rd Party CA - One Time Token",id:"3rd-party-ca---one-time-token",level:4},{value:"3rd Party CA - Auto Enrolled",id:"3rd-party-ca---auto-enrolled",level:4},{value:"Choosing an Identity Type",id:"choosing-an-identity-type",level:2}],y={toc:f};function k(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"creating-an-identity"},"Creating an Identity"),(0,a.kt)("p",null,"The mechanism for creating identities is influenced by how your Ziti network is setup, specifically how the PKI is\nestablished. Identities are itegrally linked to the PKI configured in a given Ziti network and directly affects how\nidentities are created and enrolled. There are generally three enrollment methods for identities:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One Time Token (ott) identites using the configured PKI"),(0,a.kt)("li",{parentName:"ul"},"One Time Token (ott) identites using a 3rd Party CA"),(0,a.kt)("li",{parentName:"ul"},"3rd Party auto-enrolled identities")),(0,a.kt)("h2",{id:"choosing-an-enrollment-method"},"Choosing an Enrollment Method"),(0,a.kt)("p",null,"Choosing which type of enrollment your identity will use comes down to whether you are using a 3rd Party CA or not. If the\nnetwork does not have a 3rd Party Certificate configured the only option is to use the One Time Token (OTT) enrollment method."),(0,a.kt)("p",null,"If one or more 3rd Party CA is installed you will need to understand the intention of each 3rd Party certificate."),(0,a.kt)("p",null,"Each of the types of enrollments are secure it just depends on your actual network setup as to which type to choose. If\nyou don't know - just use the One Time Token (OTT) method. The identity can always be recreated at a later date if necessary."),(0,a.kt)("h3",{id:"one-time-token-ott"},"One Time Token (OTT)"),(0,a.kt)("p",null,"The One Time Token method is available to all Ziti networks.  A one time token enrolled identity will\nhave a token generated at the time of the identity's creation.  This token is then submitted at some point in the future\nas part of the ",(0,a.kt)("a",{parentName:"p",href:"./enrolling"},"enrollment")," process.  Once an identity is successfully enrolled - the one time token is\nno longer valid and cannot be used to enroll the same identity again."),(0,a.kt)("p",null,"One time tokens are delivered from the Ziti Controller as a ",(0,a.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7519"},"jwt")," and the token\nexpires 24 hours after the identity is created.  The token is downloadable via the Ziti Admin Console. After you create\na user you can go to the Identities page and click the icon that looks like a certificate to download the .jwt file."),(0,a.kt)("p",null,"You can also create an identity for one time token enrollment using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ziti")," cli tool.  This command will\ncreate a new identity and output the jwt to the selected path. You can then transfer the .jwt file to the device where\nthe permanent identity JSON file will be installed by running the ",(0,a.kt)("inlineCode",{parentName:"p"},"enroll")," command."),(0,a.kt)(o,{mdxType:"CreateCliExampleMd"}),(0,a.kt)("h3",{id:"3rd-party-ca---overview"},"3rd Party CA - Overview"),(0,a.kt)("p",null,'The Ziti Controller is capable of using an existing PKI for authentication and authorization rather than to PKI\nconfigured in the Ziti Controller.  Certificates that are not controlled by the Ziti Controller are referred to as "3rd\nparty". If you have an existing PKI setup you wish to reuse or if you are just interested in learning how\nto use a 3rd Party CA this section is for you.'),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Reusing a PKI is not a simple topic and managing and maintaining a PKI is out of the scope of this guide.")),(0,a.kt)("p",null,"A 3rd Party CA will need to be created and the public certificate uploaded into the Ziti Controller. After using an\nexisting PKI to reuse/generate a certificate, the Ziti Controller will be to create identities which will be expected to\npresent a certificate during the connection process that is valid per the provided certificate."),(0,a.kt)("h4",{id:"adding-a-3rd-party-ca-to-the-ziti-controller"},"Adding a 3rd Party CA to the Ziti Controller"),(0,a.kt)("p",null,"Adding a certificate to the Ziti Controller is easy using the Ziti Console."),(0,a.kt)(c.Z,{mdxType:"Tabs"},(0,a.kt)(d.Z,{value:"tabid-new-ca-ui",label:"New CA via UI",mdxType:"TabItem"},(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'On the left side click "Certificate Authorities"'),(0,a.kt)("li",{parentName:"ol"},'In the top right corner of the screen click the "plus" image to add a new Certificate Authority'),(0,a.kt)("li",{parentName:"ol"},"Enter the name of the Certificate Authority you would like to create"),(0,a.kt)("li",{parentName:"ol"},"Choose if the CA should be used for Enrollment (yes) and Auth (yes)"),(0,a.kt)("li",{parentName:"ol"},"Click save"))),(0,a.kt)(d.Z,{value:"tabid-new-ca-cli",label:"New CA via REST",mdxType:"TabItem"},(0,a.kt)(s,{mdxType:"CreateCaJsonMd"}))),(0,a.kt)("h4",{id:"3rd-party-ca---one-time-token"},"3rd Party CA - One Time Token"),(0,a.kt)("p",null,"3rd Party CA OTT enrollment is closely related to ",(0,a.kt)("a",{parentName:"p",href:"#one-time-token-ott"},"OTT Enrollment"),". The main difference is the\nutilization of a 3rd party CA certificate rather than the configured Ziti Edge CA and PKI. In this method, the system\ndoes not have access to the 3rd party CA private key and thus cannot provide CSR fulfillment capabilities. Instead it is\nassumed that the enrolling device has a separate process to acquire signed certificates. Rather than submitting a CSR\nthe client uses an already acquired signed certificate as its client certificate for the enrollment request. The client\ncertificate is validated against the CA certificate tied to the one time token."),(0,a.kt)("p",null,"Similar to the ",(0,a.kt)("a",{parentName:"p",href:"#one-time-token-ott"},"OTT Enrollment")," process, identities must be provisioned ahead of enrollment in\norder to generate one time token required and to creat the jwt that can be delivered to enrolling devices. This means\nthat the provisioning of the Ziti Edge identities and the client certificates must be coordinated. Identities can be enrolled with a one time token flow similar to the ",(0,a.kt)("a",{parentName:"p",href:"#one-time-token-ott"},"one time token flow"),"."),(0,a.kt)("h4",{id:"3rd-party-ca---auto-enrolled"},"3rd Party CA - Auto Enrolled"),(0,a.kt)("p",null,"CA Auto Enrollment is useful in situations where devices are provisioned with certificates en-mass that need to be able\nto register as identities within Ziti Edge. This enrollment method allows for device provisioning processes to skip the\nmanual configuration of Ziti Edge and instead allow clients to present a signed client certificate to generate an\nidentity during the enrollment process. The identity will grant the client access to authenticate only - any\nauthorization will need to be done after the device identities have been created."),(0,a.kt)("p",null,"A certificate can only be used for one identity. The Ziti Edge system does not allow the same certificate to be used for\nmultiple identities. An enrollment request is comprised of a special enrollment URL used to perform an HTTP POST request\nusing the signed client certificate as the TLS client certificate and an optional JSON payload that allows the client to\nspecify the devices display name and internal username. See ",(0,a.kt)("a",{parentName:"p",href:"./enrolling"},"enrollment")," for more details on enrolling."),(0,a.kt)(c.Z,{mdxType:"Tabs"},(0,a.kt)(d.Z,{label:"New 3rd Party CA Identity via UI",value:"tabid-new-identity-ui",mdxType:"TabItem"},(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'On the left side click "Certificate Authorities"'),(0,a.kt)("li",{parentName:"ol"},'In the top right corner of the screen click the "plus" image to add a new Certificate Authority'),(0,a.kt)("li",{parentName:"ol"},"Enter the name of the Certificate Authority you would like to create"),(0,a.kt)("li",{parentName:"ol"},"Choose if the CA should be used for Enrollment (yes) and Auth (yes)"),(0,a.kt)("li",{parentName:"ol"},"Click save"))),(0,a.kt)(d.Z,{label:"New 3rd Party Identity via CLI",value:"tabid-new-identity-cli",mdxType:"TabItem"},(0,a.kt)(o,{mdxType:"CreateIdCliMd"}))),(0,a.kt)("h2",{id:"choosing-an-identity-type"},"Choosing an Identity Type"),(0,a.kt)("p",null,"The three types of identities are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"User"),(0,a.kt)("li",{parentName:"ul"},"Device"),(0,a.kt)("li",{parentName:"ul"},"Service")),(0,a.kt)("p",null,"These are functionally equivalent and have identical properties. You may wish to express the intended purpose of an\nidentity by choosing one or another type when the identity is created. The type can not be changed."))}k.isMDXComponent=!0}}]);