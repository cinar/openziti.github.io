"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[5584],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(n),d=i,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={},a="Service Configurations",l={unversionedId:"core-concepts/config-store/overview",id:"core-concepts/config-store/overview",title:"Service Configurations",description:'Ziti Service Configurations, henceforth "Configs", may be associated with a service to provide metadata for the application that is being delivered by that service.',source:"@site/docs/core-concepts/config-store/overview.md",sourceDirName:"core-concepts/config-store",slug:"/core-concepts/config-store/overview",permalink:"/docusaurus/docs/core-concepts/config-store/overview",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/core-concepts/config-store/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"rootSidebar",previous:{title:"Creating",permalink:"/docusaurus/docs/core-concepts/services/creating"},next:{title:"Consuming",permalink:"/docusaurus/docs/core-concepts/config-store/consuming"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Tunneler Config Types",id:"tunneler-config-types",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"service-configurations"},"Service Configurations"),(0,i.kt)("p",null,'Ziti Service Configurations, henceforth "Configs", may be associated with a service to provide metadata for the application that is being delivered by that service.'),(0,i.kt)("p",null,"Configs are created and updated through the edge-management API and consumed by Edge SDKs through the edge-client API. Configs and Config Types are Ziti entities. Each Config is an instance of a Config Type."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The configuration store has several components:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Config Types"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Config Types define a type of Config, including an optional JSON schema that the configuration data must conform to."),(0,i.kt)("li",{parentName:"ol"},"Config Types have the following properties:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"A Config Type name"),(0,i.kt)("li",{parentName:"ol"},"An optional JSON schema to validate configurations of the type"),(0,i.kt)("li",{parentName:"ol"},"Standard edge entity properties: id, tags, createdAt, updatedAt"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Configs"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Configs have the following properties:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"A Config name"),(0,i.kt)("li",{parentName:"ol"},"The configuration data, which is arbitrary JSON data, so long as it conforms to the type schema (if specified)"),(0,i.kt)("li",{parentName:"ol"},"Standard edge entity properties: id, tags, createdAt, updatedAt"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Services"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Each service can be linked to multiple Configs. Services can have one linked Config for each Config Type."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Identities"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"An identity may have a Config specified for a given service and Config. This will override the service's linked Configs.")))),(0,i.kt)("p",null,"This configuration model has the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Different applications can have their own Configs for the same service"),(0,i.kt)("li",{parentName:"ul"},"Applications can have multiple Config Types for themselves where it makes sense"),(0,i.kt)("li",{parentName:"ul"},"There are tunneler Config Types for intercept (client) side and hosting (server) side"),(0,i.kt)("li",{parentName:"ul"},"Since an application can support multiple Config Types, applications can version their Config Types as their needs change")),(0,i.kt)("h2",{id:"tunneler-config-types"},"Tunneler Config Types"),(0,i.kt)("p",null,"The Ziti tunnelers are themselves SDK applications and so they serve as an example of how configuration data can be used."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tunnelers need to know what ip/dns and port(s) to intercept for services they are proxying on the intercept (client) side"),(0,i.kt)("li",{parentName:"ul"},"Tunnelers need to know where to forward to destination servers on the hosting (server) side")),(0,i.kt)("p",null,"Ziti provides a handful of tunneler Config Types."),(0,i.kt)("p",null,"The most relevant Config Types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docusaurus/docs/core-concepts/config-store/tunneler-config-type-intercept.v1"},(0,i.kt)("inlineCode",{parentName:"a"},"intercept.v1")),": used by a tunneler to configure itself as a proxy for a particular service"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docusaurus/docs/core-concepts/config-store/tunneler-config-type-host.v1"},(0,i.kt)("inlineCode",{parentName:"a"},"host.v1")),": describes the destination server for a Ziti service hosted by a tunneler")),(0,i.kt)("p",null,"Other Config Types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host.v2"),": an array of ",(0,i.kt)("inlineCode",{parentName:"li"},"host.v1")," Configs"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ziti-tunneler-client.v1"),": predecessor of ",(0,i.kt)("inlineCode",{parentName:"li"},"intercept.v1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ziti-tunneler-server.v1"),": predecessor of ",(0,i.kt)("inlineCode",{parentName:"li"},"host.v1"))),(0,i.kt)("p",null,"The tunneler Config Types' schemas are maintained ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openziti/edge/tree/main/tunnel/entities"},"in GitHub"),"."))}u.isMDXComponent=!0}}]);