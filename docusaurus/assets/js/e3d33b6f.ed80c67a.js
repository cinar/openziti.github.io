"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[7070],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),u=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(o,".").concat(m)]||p[m]||d[m]||a;return n?i.createElement(h,l(l({ref:t},c),{},{components:n})):i.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<a;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var i=n(7462),r=(n(7294),n(3905));const a={},l="Kubernetes Sidecar Client",s={unversionedId:"kubernetes/kubernetes-sidecar-tunnel-quickstart",id:"kubernetes/kubernetes-sidecar-tunnel-quickstart",title:"Kubernetes Sidecar Client",description:"This guide shows you how to access a Ziti service from a pre-existing (or third party) application that's running",source:"@site/docs-guides/kubernetes/kubernetes-sidecar-tunnel-quickstart.md",sourceDirName:"kubernetes",slug:"/kubernetes/kubernetes-sidecar-tunnel-quickstart",permalink:"/docusaurus/guides/kubernetes/kubernetes-sidecar-tunnel-quickstart",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rootSidebar",previous:{title:"Guides",permalink:"/docusaurus/guides/"},next:{title:"Hardware Security Modules (HSM) - PKCS11",permalink:"/docusaurus/guides/hsm/"}},o={},u=[{value:"Overview",id:"overview",level:2},{value:"Solution Overview",id:"solution-overview",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create an Identity and AppWAN",id:"create-an-identity-and-appwan",level:2},{value:"Create a Kubernetes Secret",id:"create-a-kubernetes-secret",level:2},{value:"Deploy the Pod",id:"deploy-the-pod",level:2},{value:"Test the Service",id:"test-the-service",level:2}],c={toc:u};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"kubernetes-sidecar-client"},"Kubernetes Sidecar Client"),(0,r.kt)("p",null,"This guide shows you how to access a Ziti service from a pre-existing (or third party) application that's running\nin a Kubernetes Pod. To provide access to the service, we will deploy the ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti-tunnel")," client in a sidecar\ncontainer."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://openziti.github.io/ziti/quickstarts/networks-overview.html"},"Ziti Network Quickstart"),"\nwalked you through standing up a Ziti instance and accessing a Ziti service from your workstation with\n",(0,r.kt)("inlineCode",{parentName:"p"},"ziti-tunnel"),". In this guide we'll deploy the same ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti-tunnel")," client, but instead of running it from the\ncommand line we will deploy it in a sidecar container in a Kubernetes Pod."),(0,r.kt)("p",null,"This guide also demonstrates ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti-tunnel"),"'s internal DNS server, which allows us to access Ziti services\nby hostname instead of IP address."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://openziti.github.io/ziti/clients/linux.html"},"Here's some detail on how the various intercept modes work on Linux")),(0,r.kt)("h3",{id:"solution-overview"},"Solution Overview"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Diagram of solution",src:n(7531).Z,width:"865",height:"584"})),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Complete the ",(0,r.kt)("a",{parentName:"li",href:"https://openziti.github.io/ziti/quickstarts/networks-overview.html"},"Ziti Network Quickstart"),". This guide\nuses the Ziti Controller and Ziti Edge Router that are created in the Ziti Quickstart."),(0,r.kt)("li",{parentName:"ul"},"Admin-level access to a Kubernetes cluster via ",(0,r.kt)("inlineCode",{parentName:"li"},"kubectl"),".")),(0,r.kt)("h2",{id:"create-an-identity-and-appwan"},"Create an Identity and AppWAN"),(0,r.kt)("p",null,'This guide will re-use the "eth0.ziti.cli" service that was created in the Ziti Network Quickstart.'),(0,r.kt)("p",null,"We will create a new identity for our client, with a new AppWAN that uses the eth0.ziti.cli service."),(0,r.kt)("p",null,"Create the Identity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ziti edge controller create identity device tunnel-sidecar -o tunnel-sidecar.jwt\n")),(0,r.kt)("p",null,"Create the AppWAN and reference the service created in the Ziti Network Quickstart. We'll be using ",(0,r.kt)("inlineCode",{parentName:"p"},"eth0.ziti.cli"),"\nhere but if you created ",(0,r.kt)("inlineCode",{parentName:"p"},"eth0.ziti.ui")," in the quickstart - use that instead. Also note that in the\ntunnel-sidecar-demo.yaml:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ziti edge controller create app-wan ziti-tunnel-appwan -i tunnel-sidecar -s eth0.ziti.cli\n")),(0,r.kt)("h2",{id:"create-a-kubernetes-secret"},"Create a Kubernetes Secret"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti-tunnel")," sidecar will access its identity by mounting a Kubernetes secret in the container.\nWe can mount the JWT as a secret like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ kubectl create secret generic tunnel-sidecar.jwt --from-file=tunnel-sidecar.jwt\nsecret/tunnel-sidecar.jwt created\n")),(0,r.kt)("h2",{id:"deploy-the-pod"},"Deploy the Pod"),(0,r.kt)("p",null,"Deploy a Pod that runs a client application and ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti-tunnel")," as a sidecar container. For this\ndemonstration, the client application is ",(0,r.kt)("inlineCode",{parentName:"p"},"curl"),". Our Pod runs ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," in a loop so we can see content\nfrom our Ziti service in the Pod's logs."),(0,r.kt)("p",null,"Save the following yaml to a file named tunnel-sidecar-demo.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: tunnel-sidecar-pv-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Mi\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ziti-tunnel-sidecar-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ziti-tunnel-sidecar-demo\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: ziti-tunnel-sidecar-demo\n    spec:\n      containers:\n      - image: centos\n        name: testclient\n        command: ["sh","-c","while true; set -x; do curl -sSLf eth0.ziti.cli 2>&1; set +x; sleep 5; done"]\n      - image: netfoundry/ziti-tunnel:latest\n        name: ziti-tunnel\n        env:\n        - name: NF_REG_NAME\n          value: tunnel-sidecar\n        volumeMounts:\n        - name: tunnel-sidecar-jwt\n          mountPath: "/var/run/secrets/kubernetes.io/enrollment-token"\n          readOnly: true\n        - name: ziti-tunnel-persistent-storage\n          mountPath: /netfoundry\n        securityContext:\n          capabilities:\n            add:\n            - NET_ADMIN\n      dnsPolicy: "None"\n      dnsConfig:\n        nameservers:\n          - 127.0.0.1\n          - 8.8.8.8\n      restartPolicy: Always\n      volumes:\n      - name: ziti-tunnel-persistent-storage\n        persistentVolumeClaim:\n          claimName: tunnel-sidecar-pv-claim\n      - name: tunnel-sidecar-jwt\n        secret:\n          secretName: tunnel-sidecar.jwt\n')),(0,r.kt)("p",null,"You'll notice that the ",(0,r.kt)("inlineCode",{parentName:"p"},"ziti-tunnel")," sidecar container has a few requirements:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The name of the identity that is assumed by ",(0,r.kt)("inlineCode",{parentName:"li"},"ziti-tunnel")," must be passed into the container with the\n",(0,r.kt)("inlineCode",{parentName:"li"},"NF_REG_NAME")," environment variable."),(0,r.kt)("li",{parentName:"ol"},'The secret that we created above for the enrollment token must be mounted into the container at\n"/var/run/secrets/netfoundry.io/enrollment-token".'),(0,r.kt)("li",{parentName:"ol"},'A persistent volume must be mounted at "/netfoundry". This volume is used to save the json file that is created\nwhen the one-time enrollment token is used. If this volume is not persistent, you will need to provide a new\nenrollment token each time the Pod is restarted!')),(0,r.kt)("p",null,"Once the yaml is saved, we can deploy the Pod with ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ kubectl apply -f ./tunnel-sidecar-demo.yaml\npersistentvolumeclaim/tunnel-sidecar-pv-claim created\ndeployment.apps/ziti-tunnel-sidecar-demo created\n")),(0,r.kt)("h2",{id:"test-the-service"},"Test the Service"),(0,r.kt)("p",null,"First we need to get the name of the Pod that Kubernetes deployed for us:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ kubectl get pods\nziti-tunnel-sidecar-demo-749c476989-6wpfn   1/1     Running   0          42s\n")),(0,r.kt)("p",null,'Then we can tail the logs for the "testclient" container:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ kubectl logs -f ziti-tunnel-sidecar-demo-749c476989-6wpfn --container testclient\n54.67.121.213\n54.67.121.213\n54.67.121.213\n")),(0,r.kt)("p",null,"Notice that the ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," client is using the DNS name that we provided in the Ziti service definition to make the\nrequest."))}d.isMDXComponent=!0},7531:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/sidecar-diagram-94e794be522098d08715eac653dd8207.svg"}}]);