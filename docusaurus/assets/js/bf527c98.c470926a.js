"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[9911],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>u});var n=i(7294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(i),u=o,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||a;return i?n.createElement(m,r(r({ref:t},p),{},{components:i})):n.createElement(m,r({ref:t},p))}));function u(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=i.length,r=new Array(a);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=i[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},8639:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=i(7462),o=(i(7294),i(3905));const a={sidebar_position:2,id:"zitiSoftwareArchitecture"},r="Software Architecture",s={unversionedId:"zitiSoftwareArchitecture",id:"zitiSoftwareArchitecture",title:"Software Architecture",description:"This article describes the internal software architecture of Ziti. In most scenarios, this information is not essential",source:"@site/docs/software-architecture.md",sourceDirName:".",slug:"/zitiSoftwareArchitecture",permalink:"/docusaurus/docs/zitiSoftwareArchitecture",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/software-architecture.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"zitiSoftwareArchitecture"},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/docusaurus/docs/introduction/contributing"},next:{title:"Start Cooking With Ziti",permalink:"/docusaurus/docs/quickstarts/network/"}},l={},c=[{value:"Fabric",id:"fabric",level:2},{value:"Edge",id:"edge",level:2},{value:"SDKs",id:"sdks",level:2},{value:"Clients",id:"clients",level:2}],p={toc:c};function d(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"software-architecture"},"Software Architecture"),(0,o.kt)("p",null,"This article describes the internal software architecture of Ziti. In most scenarios, this information is not essential\nto deploy and operate a Ziti Network. While not strictly necessary, understanding the internal model can help operators\nintuit Ziti functionality, understand design decisions, and smooth the road for intrepid contributors."),(0,o.kt)("p",null,"The simplest way to describe a Ziti Network is to by describing the binary outputs of the OpenZiti GitHub repositories.\nIf we did so the components would be: Ziti Controller, Ziti Edge Router, Ziti Fabric Router, and Ziti Clients. However,\ninternally the code is divided up into four main groupings:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fabric - ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/fabric"},"https://github.com/openziti/fabric")),(0,o.kt)("li",{parentName:"ul"},"Edge - ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/edge"},"https://github.com/openziti/edge")),(0,o.kt)("li",{parentName:"ul"},"SDKs",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-sdk-c"},"https://github.com/openziti/ziti-sdk-c")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-sdk-jvm"},"https://github.com/openziti/ziti-sdk-jvm")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-sdk-py"},"https://github.com/openziti/ziti-sdk-py")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/sdk-golang"},"https://github.com/openziti/sdk-golang")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-sdk-nodejs"},"https://github.com/openziti/ziti-sdk-nodejs")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-sdk-js"},"https://github.com/openziti/ziti-sdk-js")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-sdk-csharp"},"https://github.com/openziti/ziti-sdk-csharp")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-sdk-swift"},"https://github.com/openziti/ziti-sdk-swift")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-sdk-rb"},"https://github.com/openziti/ziti-sdk-rb")),(0,o.kt)("li",{parentName:"ul"},"...and more"))),(0,o.kt)("li",{parentName:"ul"},"Clients",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-tunnel-sdk-c"},"https://github.com/openziti/ziti-tunnel-sdk-c")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/ziti-tunnel-apple"},"https://github.com/openziti/ziti-tunnel-apple")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openziti/desktop-edge-win"},"https://github.com/openziti/desktop-edge-win")),(0,o.kt)("li",{parentName:"ul"},"...and others")))),(0,o.kt)("h2",{id:"fabric"},"Fabric"),(0,o.kt)("p",null,"Each of the above build upon each other with the Fabric repository as the base. It is the only repository that can be\nused on its own and have a semblance of network connectivity. From the Fabric repository alone, one can build a\nfabric-only controller and router binaries. The capabilities of these components will be limited and require\nlow-level configuration and maintenance. If done, a mesh network will be established that can be used to send\ndata from any point on the network to any other through a circuit that defines the client, the destination service, and\na terminator."),(0,o.kt)("p",null,'Without additional code, there will be a general lack of initiation-side security (i.e., anything can connect)\nand a stark lack of connectivity options both on the client and service side. The Fabric on its own does not present any\nfacilities that allow SDKs to connect to it. It does not know what the Edge and SDK\ncomponents can do. The Fabric is "blind" to the concepts beyond its mesh network.'),(0,o.kt)("p",null,"The Fabric provides extension points that allow others to define additional functionality. The primary interfaces\nfor this are provided on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Controller")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Router")," structs. Both expose code-level APIs that enable integrations."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Controller")," instances allow the definition and management of persistent data for services, routers, and terminators.\nIt also exposes extension points via the following interfaces:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xctrl")," - allows the definition of messages and message handlers that can be sent on the control plane between a\ncontroller and router"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xmgmt")," - allows the definition of messages and message handlers that can be sent on management connections"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xweb")," - allows the definition of HTTP Web APIs, which the controller uses to expose the Fabric API and HealthCheck\nAPI")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Router")," instances present an API that allows circuits to be setup and destroyed. It also exposes extension points via\nthe following interfaces:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xctrl")," - allows the definition of messages and message handlers that can be sent on the control plane between a\ncontroller and router"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xweb")," - allows the definition of HTTP Web APIs, which the router uses to expose the HealthCheck API"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xgress")," - allows the definition of initiating and terminating connection capabilities")),(0,o.kt)("p",null,"Additionally, routers and controllers allow other components to inspect the static file configuration used to start an\ninstance. The modules ",(0,o.kt)("inlineCode",{parentName:"p"},"xctrl"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"xweb"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"xgress")," make use of this to add configuration sections. These configuration\nsections allow type-specific custom configuration."),(0,o.kt)("h2",{id:"edge"},"Edge"),(0,o.kt)("p",null,"The Fabric provides several extension points. The main consumer of those extension points is the\nEdge. The Edge extends controllers and routers to add additional security controls and enable SDK connectivity.\nThe Edge adds the concepts of endpoint identities, which represent Ziti SDKs that can connect to a Ziti Network. This\nconcept acts as a springboard for an entire suite of identity life cycle and access management features. Below are the\nFabric extension points and what Edge features they enable."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xctrl")," - adds API Session/Session control and enforcement to the controller and router"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xweb")," - exposes the Edge Management & Client REST APIs on the controller"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"xgress")," - defines a new protocol, ",(0,o.kt)("inlineCode",{parentName:"li"},"xgress_edge"),", that enables SDKs to connect to routers to act as service clients\nand hosts")),(0,o.kt)("p",null,"The Edge also exposes a configuration extension point for SDKs. An SDK developer can define\nconfiguration types with JSON schemas. This configuration can be stored at the service, identity, or identity+service\nspecific level and delivered to connecting applications upon request. This mechanism allows SDK applications to\ndefine and distribute configuration to power advanced application features. The pre-built Ziti clients\nuse this feature to power features such as DNS/IP intercept addresses."),(0,o.kt)("h2",{id:"sdks"},"SDKs"),(0,o.kt)("p",null,"The Ziti SDKs come in a variety of languages. Where appropriate, they are wrappers around the Ziti C SDK. The SDKs\nmake use of the Edge Client REST API on the controller and the ",(0,o.kt)("inlineCode",{parentName:"p"},"xgress_edge")," protocol on the router to extend a Ziti\nNetwork beyond the mesh network of routers and into applications and devices. The SDKs rely on the Edge to enable\nservice connectivity over a Ziti Network. The SDKs do not directly interact with the Fabric. They act as a\nfulcrum to leverage the power of a Ziti Network."),(0,o.kt)("p",null,"The SDKs expose an API that allows endpoints to enroll, authenticate, list services, receive centralized configuration,\nand connect or host services based on security access configuration."),(0,o.kt)("h2",{id:"clients"},"Clients"),(0,o.kt)("p",null,"Ziti clients are any code that uses a Ziti SDK to connect to a Ziti Network. The OpenZiti project can provide these\napplications or be custom-built by any software developer. They rely directly upon a Ziti SDK, indirectly\non the Edge, and subsequently the Fabric. They can serve as the initiating client or terminating host for\nservices. Clients may or may not expose extension points - it is at the author's discretion."))}d.isMDXComponent=!0}}]);